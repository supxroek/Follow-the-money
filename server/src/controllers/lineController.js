import { logger } from "../utils/logger.js";

// @desc    Handle LINE webhook events
// @route   POST /api/line/webhook
// @access  Public (but validated by LINE signature)
export const handleLineWebhook = async (req, res) => {
  try {
    const events = req.body.events;

    if (!events || events.length === 0) {
      return res.status(200).json({ success: true });
    }

    // Process each event
    for (const event of events) {
      await processLineEvent(event);
    }

    res.status(200).json({ success: true });
  } catch (error) {
    logger.error("LINE webhook error:", error);
    res.status(500).json({
      success: false,
      message: "Internal server error",
    });
  }
};

// @desc    Verify LINE webhook
// @route   GET /api/line/webhook/verify
// @access  Public
export const verifyWebhook = async (req, res) => {
  try {
    res.status(200).json({
      success: true,
      message: "LINE webhook endpoint is active",
    });
  } catch (error) {
    logger.error("LINE webhook verification error:", error);
    res.status(500).json({
      success: false,
      message: "Internal server error",
    });
  }
};

// Process individual LINE events
async function processLineEvent(event) {
  try {
    const { type, source, message, replyToken } = event;

    logger.info("Processing LINE event:", { type, source: source?.type });

    switch (type) {
      case "message":
        await handleMessage(message, replyToken, source);
        break;

      case "follow":
        await handleFollow(source, replyToken);
        break;

      case "unfollow":
        await handleUnfollow(source);
        break;

      case "join":
        await handleJoin(source, replyToken);
        break;

      case "leave":
        await handleLeave(source);
        break;

      default:
        logger.info("Unhandled event type:", type);
    }
  } catch (error) {
    logger.error("Error processing LINE event:", error);
  }
}

// Handle message events
async function handleMessage(message, replyToken, source) {
  try {
    if (message.type !== "text") {
      return;
    }

    const text = message.text.toLowerCase().trim();

    // Simple command handling
    switch (text) {
      case "help":
      case "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠":
        await replyMessage(
          replyToken,
          "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏≠‡∏õ LINE Shared Expense Tracker\n\n‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n- help: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠\n- groups: ‡∏î‡∏π‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n- expenses: ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n- debts: ‡∏î‡∏π‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô"
        );
        break;

      case "groups":
      case "‡∏Å‡∏•‡∏∏‡πà‡∏°":
        await replyMessage(
          replyToken,
          "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ LIFF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
        );
        break;

      case "expenses":
      case "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢":
        await replyMessage(
          replyToken,
          "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ LIFF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"
        );
        break;

      case "debts":
      case "‡∏´‡∏ô‡∏µ‡πâ":
        await replyMessage(
          replyToken,
          "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ LIFF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô"
        );
        break;

      default:
        await replyMessage(
          replyToken,
          '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ'
        );
    }
  } catch (error) {
    logger.error("Error handling message:", error);
  }
}

// Handle follow events
async function handleFollow(source, replyToken) {
  try {
    const welcomeMessage =
      '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà LINE Shared Expense Tracker! üéâ\n\n‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢‡∏î‡∏≤‡∏¢\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ';

    await replyMessage(replyToken, welcomeMessage);

    logger.info("User followed bot:", source.userId);
  } catch (error) {
    logger.error("Error handling follow:", error);
  }
}

// Handle unfollow events
async function handleUnfollow(source) {
  try {
    logger.info("User unfollowed bot:", source.userId);
    // Optionally handle cleanup or analytics
  } catch (error) {
    logger.error("Error handling unfollow:", error);
  }
}

// Handle join events (when bot joins a group)
async function handleJoin(source, replyToken) {
  try {
    const joinMessage =
      '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° ü§ñ\n\n‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ';

    await replyMessage(replyToken, joinMessage);

    logger.info("Bot joined group:", source.groupId);
  } catch (error) {
    logger.error("Error handling join:", error);
  }
}

// Handle leave events (when bot leaves a group)
async function handleLeave(source) {
  try {
    logger.info("Bot left group:", source.groupId);
    // Optionally handle cleanup
  } catch (error) {
    logger.error("Error handling leave:", error);
  }
}

// Reply to LINE messages
async function replyMessage(replyToken, text) {
  try {
    // This would normally use the LINE Bot SDK to send replies
    // For now, just log the message
    logger.info("Would reply to LINE:", { replyToken, text });

    // TODO: Implement actual LINE Bot SDK reply
    // const client = new line.Client({ channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN });
    // await client.replyMessage(replyToken, { type: 'text', text });
  } catch (error) {
    logger.error("Error replying to LINE:", error);
  }
}
